# -*- coding: utf-8 -*-
"""DiabetesPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pYk6WFY2VgwqzKf1dU-k4ec_UXfRbeVj
"""

#Import Libraries

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

#Import Dataset

dataset=pd.read_csv('/content/diabetes.csv')

dataset.head()

dataset.shape

dataset.describe()

dataset['Outcome'].value_counts()

#0------>Non-Diabetic
#1----->Diabetic

dataset.groupby('Outcome').mean()

X=dataset.drop(columns='Outcome',axis=1)
Y=dataset['Outcome']

print(X)

print(Y)

#Standardization

scaler=StandardScaler()

X_st=scaler.fit_transform(X)

print(X_st)

X=X_st

print(X)

#Spliting Data

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X_train.shape,X_test.shape,Y_train.shape,Y_test.shape)

#Training Phase

classifier=svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

#Model Evaluation

#Accuracy Score on the training data
X_train_prediction=classifier.predict(X_train)
X_train_accuracy=accuracy_score(X_train_prediction,Y_train)
print(X_train_accuracy)

#Accuracy Score on the test data
X_test_prediction=classifier.predict(X_test)
X_test_accuracy=accuracy_score(X_test_prediction,Y_test)
print(X_test_accuracy)

#Making a Predictive System

input_data=(2,197,70,45,543,30.5,0.158,53)

input_data_array=np.asarray(input_data)

#Reshape the array as we are predicting for one instance
input_data_reshaped=input_data_array.reshape(1,-1)

#Standardize the input data

std_data=scaler.transform(input_data_reshaped)

print(std_data)

prediction=classifier.predict(std_data)
print(prediction)

if prediction[0]==0:
  print("The person is not diabetic")
else:
  print("The person is diabetic")

#Saving the train Model
import pickle

filename='model.sav'
pickle.dump(classifier,open(filename,'wb'))

loaded_model=pickle.load(open('model.sav','rb'))

input_data=(2,197,70,45,543,30.5,0.158,53)

input_data_array=np.asarray(input_data)

#Reshape the array as we are predicting for one instance
input_data_reshaped=input_data_array.reshape(1,-1)

#Standardize the input data

std_data=scaler.transform(input_data_reshaped)

print(std_data)

prediction=classifier.predict(std_data)
print(prediction)

if prediction[0]==0:
  print("The person is not diabetic")
else:
  print("The person is diabetic")



